CREATE VIEW Customer ( CustomerId string(12) NOT NULL OPTIONS(UPDATABLE 'FALSE'), FirstName string(25) OPTIONS(UPDATABLE 'FALSE'), LastName string(25) OPTIONS(UPDATABLE 'FALSE'), MiddleInitial string(15) OPTIONS(UPDATABLE 'FALSE'), StreetAddress string(50) OPTIONS(UPDATABLE 'FALSE'), StreetAddress2 string(25) OPTIONS(UPDATABLE 'FALSE'), City string(25) OPTIONS(UPDATABLE 'FALSE'), StateProvince string(25) OPTIONS(UPDATABLE 'FALSE'), PostalCode string(15) OPTIONS(UPDATABLE 'FALSE'), Country string(15) OPTIONS(UPDATABLE 'FALSE'), PhoneNumber string(30) OPTIONS(UPDATABLE 'FALSE')
) OPTIONS(UPDATABLE 'FALSE') AS SELECT * FROM All_Customers.customer; CREATE VIEW Account ( AccountID long NOT NULL OPTIONS(CASE_SENSITIVE 'FALSE', UPDATABLE 'FALSE', FIXED_LENGTH 'TRUE', SEARCHABLE 'ALL_EXCEPT_LIKE'), CustomerId string(12) NOT NULL OPTIONS(UPDATABLE 'FALSE'), AccountType string(10) NOT NULL OPTIONS(UPDATABLE 'FALSE'), AccountStatus string(10) NOT NULL OPTIONS(UPDATABLE 'FALSE'), DateOpened date OPTIONS(CASE_SENSITIVE 'FALSE', UPDATABLE 'FALSE', FIXED_LENGTH 'TRUE', SEARCHABLE 'ALL_EXCEPT_LIKE'), DateClosed date OPTIONS(CASE_SENSITIVE 'FALSE', UPDATABLE 'FALSE', FIXED_LENGTH 'TRUE', SEARCHABLE 'ALL_EXCEPT_LIKE')
) OPTIONS(UPDATABLE 'FALSE') AS SELECT * FROM All_Customers.account; CREATE VIEW AccountHoldings ( AccountID long, ProductID string, PurchaseDate date, ProductShares float, ProductName string, ProductType string, Issuer string, LastTradePrice double, AccountValue double
) OPTIONS(UPDATABLE 'FALSE') AS SELECT All_Customers.accountholdings.AccountID, All_Customers.accountholdings.ProductID, All_Customers.accountholdings.PurchaseDate, All_Customers.accountholdings.ProductShares, Products_DDC.productdata.ProductName, Products_DDC.productdata.ProductType, Products_DDC.productdata.Issuer, QuoteService.QuoteService.LastTradePrice, (QuoteService.QuoteService.LastTradePrice * All_Customers.accountholdings.ProductShares) AS AccountValue FROM ((Products_DDC.ProductData INNER JOIN Products_DDC.ProductSymbols ON Products_DDC.productdata.ProductID = Products_DDC.productsymbols.ProductID) INNER JOIN All_Customers.ACCOUNTHOLDINGS ON All_Customers.accountholdings.ProductID = Products_DDC.productdata.ProductID) INNER JOIN QuoteService.QuoteService ON Products_DDC.productsymbols.Symbol = QuoteService.QuoteService.Symbol; CREATE VIEW AccountValue ( CustomerId string(12) NOT NULL OPTIONS(UPDATABLE 'FALSE'), AccountID long NOT NULL OPTIONS(CASE_SENSITIVE 'FALSE', UPDATABLE 'FALSE', FIXED_LENGTH 'TRUE', SEARCHABLE 'ALL_EXCEPT_LIKE'), TotalValue double
) OPTIONS(UPDATABLE 'FALSE') AS SELECT BrokerageModel.Customer.CustomerId, BrokerageModel.Account.AccountID, SUM(BrokerageModel.AccountHoldings.AccountValue) AS TotalValue FROM BrokerageModel.Customer, BrokerageModel.Account, BrokerageModel.AccountHoldings WHERE (BrokerageModel.Customer.CustomerId = BrokerageModel.Account.CustomerId) AND (BrokerageModel.Account.AccountID = BrokerageModel.AccountHoldings.AccountID) GROUP BY BrokerageModel.Customer.CustomerId, BrokerageModel.Account.AccountID; CREATE VIEW HighNetWorthCustomers ( CustomerId string(12) NOT NULL OPTIONS(UPDATABLE 'FALSE'), AccountID long NOT NULL OPTIONS(CASE_SENSITIVE 'FALSE', UPDATABLE 'FALSE', FIXED_LENGTH 'TRUE', SEARCHABLE 'ALL_EXCEPT_LIKE'), TotalValue double, FirstName string(25) OPTIONS(UPDATABLE 'FALSE'), LastName string(25) OPTIONS(UPDATABLE 'FALSE'), MiddleInitial string(15) OPTIONS(UPDATABLE 'FALSE'), StreetAddress string(50) OPTIONS(UPDATABLE 'FALSE'), StreetAddress2 string(25) OPTIONS(UPDATABLE 'FALSE'), City string(25) OPTIONS(UPDATABLE 'FALSE'), StateProvince string(25) OPTIONS(UPDATABLE 'FALSE'), PostalCode string(15) OPTIONS(UPDATABLE 'FALSE'), Country string(15) OPTIONS(UPDATABLE 'FALSE'), PhoneNumber string(30) OPTIONS(UPDATABLE 'FALSE')
) OPTIONS(UPDATABLE 'FALSE') AS SELECT BrokerageModel.AccountValue.CustomerId, BrokerageModel.AccountValue.AccountID, BrokerageModel.AccountValue.TotalValue, All_Customers.customer.FirstName, All_Customers.customer.LastName, All_Customers.customer.MiddleInitial, All_Customers.customer.StreetAddress, All_Customers.customer.StreetAddress2, All_Customers.customer.City, All_Customers.customer.StateProvince, All_Customers.customer.PostalCode, All_Customers.customer.Country, All_Customers.customer.PhoneNumber FROM BrokerageModel.AccountValue, All_Customers.CUSTOMER WHERE (All_Customers.customer.CustomerId = BrokerageModel.AccountValue.CustomerId) AND (BrokerageModel.AccountValue.TotalValue > 70000.0);