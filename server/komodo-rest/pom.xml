<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<parent>
		<groupId>org.teiid.komodo</groupId>
		<artifactId>komodo-server</artifactId>
		<version>0.0.4-SNAPSHOT</version>
	</parent>

	<artifactId>komodo-rest</artifactId>
	<name>Komodo REST</name>
	<description>Provides RESTful access to the Komodo engine</description>
	<packaging>war</packaging>

	<properties>
		<version.resteasy>3.0.19.Final</version.resteasy>
		<webapp-dir>${project.artifactId}-${project.version}</webapp-dir>
		<webapp-outdir>${basedir}/target/${webapp-dir}</webapp-outdir>
		<!-- To be injected into swagger index.html -->
		<rest-context>vdb-builder</rest-context>
		<rest-version>v1</rest-version>
		<app.rest.name>${rest-context}</app.rest.name>
		<app.rest.title>Vdb Builder</app.rest.title>
		<app.rest.version>${project.version}</app.rest.version>
		<app.rest.description>A tool that allows creating, editing and managing dynamic VDBs and their contents</app.rest.description>
		<!-- Must remain all on one line. Otherwise, VFSUtils.readManifest complains of invalid header -->
        <docker.username>teiid</docker.username>
        <docker.imagename>komodo</docker.imagename>
		<manifest.dependencies>org.jboss.logging,org.jboss.teiid.api,org.jboss.teiid.admin,org.jboss.teiid.common-core,org.jboss.teiid,org.jboss.teiid.client,io.swagger,com.fasterxml.jackson.core.jackson-core,com.fasterxml.jackson.core.jackson-databind,com.fasterxml.jackson.core.jackson-annotations,com.fasterxml.jackson.dataformat,org.jboss.as.cli,org.jboss.as.controller,org.jboss.dmr</manifest.dependencies>
	</properties>

	<dependencies>
		<dependency>
			<groupId>org.teiid.komodo</groupId>
			<artifactId>komodo-relational</artifactId>
            <exclusions>
              <exclusion>
                <groupId>org.teiid</groupId>
                <artifactId>*</artifactId>
              </exclusion>
            </exclusions>
		</dependency>
        <dependency>
          <groupId>org.wildfly.swarm</groupId>
          <artifactId>undertow</artifactId>
        </dependency>   
        <dependency>
            <groupId>org.wildfly.swarm</groupId>
              <artifactId>management</artifactId>
        </dependency>
        <dependency>
          <groupId>org.wildfly.swarm</groupId>
          <artifactId>swagger</artifactId>         
        </dependency>
        <dependency>
            <groupId>io.swagger</groupId>
            <artifactId>swagger-core</artifactId>
            <scope>provided</scope>
            <exclusions>
              <exclusion>
                <groupId>*</groupId>
                <artifactId>*</artifactId>
              </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>io.swagger</groupId>
            <artifactId>swagger-models</artifactId>
            <scope>provided</scope>
            <exclusions>
              <exclusion>
                <groupId>*</groupId>
                <artifactId>*</artifactId>
              </exclusion>
            </exclusions>
        </dependency>               			
    
		<dependency>
			<groupId>org.teiid</groupId>
			<artifactId>teiid-api</artifactId>
			<scope>provided</scope>
		</dependency> 
		<dependency>
			<groupId>org.teiid</groupId>
			<artifactId>teiid-client</artifactId>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>org.teiid</groupId>
			<artifactId>teiid-engine</artifactId>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>org.teiid</groupId>
			<artifactId>teiid-common-core</artifactId>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>org.teiid</groupId>
			<artifactId>teiid-admin</artifactId>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>org.teiid</groupId>
			<artifactId>teiid-jboss-admin</artifactId>
			<scope>provided</scope>
            <exclusions>
              <exclusion>
                <groupId>org.teiid</groupId>
                <artifactId>*</artifactId>
              </exclusion>
            </exclusions>
		</dependency>
		<dependency>
			<groupId>com.sun.xsom</groupId>
			<artifactId>xsom</artifactId>
		</dependency>
		<dependency>
			<groupId>com.google.code.gson</groupId>
			<artifactId>gson</artifactId>
		</dependency>
 		<dependency>
			<groupId>org.wildfly.swarm</groupId>
			<artifactId>teiid</artifactId>		
		</dependency>		
  		<dependency>
			<groupId>org.wildfly.swarm</groupId>
			<artifactId>teiid-jdbc</artifactId>
            <exclusions>
              <exclusion>
                <groupId>org.teiid</groupId>
                <artifactId>*</artifactId>
              </exclusion>
            </exclusions>      
		</dependency>
        <dependency>
            <groupId>org.wildfly.swarm</groupId>
            <artifactId>teiid-mongodb</artifactId>
            <exclusions>
              <exclusion>
                <groupId>org.teiid</groupId>
                <artifactId>*</artifactId>
              </exclusion>
            </exclusions>      
        </dependency>    
	    <dependency>
	      <groupId>javax</groupId>
	      <artifactId>javaee-api</artifactId>
	      <version>7.0</version>
	      <scope>provided</scope>
	    </dependency>				
		<dependency>
		  <groupId>org.wildfly.swarm</groupId>
		  <artifactId>logging</artifactId>
		</dependency>
        <dependency>
          <groupId>org.apache.httpcomponents</groupId>
          <artifactId>httpclient</artifactId>
        </dependency>   
  		<dependency>
			<groupId>com.fasterxml.jackson.core</groupId>
			<artifactId>jackson-core</artifactId>
			<scope>provided</scope>
		</dependency>
 		<dependency>
			<groupId>com.fasterxml.jackson.core</groupId>
			<artifactId>jackson-databind</artifactId>
			<scope>provided</scope>
		</dependency> 
		<dependency>
			<groupId>com.fasterxml.jackson.dataformat</groupId>
			<artifactId>jackson-dataformat-yaml</artifactId>
			<scope>provided</scope>
		</dependency>
		<dependency>
		    <groupId>com.fasterxml.jackson.core</groupId>
		    <artifactId>jackson-annotations</artifactId>
		    <scope>provided</scope>
		</dependency>	
        <dependency>
          <groupId>org.teiid</groupId>
          <artifactId>kubernetes-service-catalog-client</artifactId>
            <exclusions>
              <exclusion>
    			<groupId>com.fasterxml.jackson.core</groupId>
    			<artifactId>*</artifactId>
              </exclusion>
              <exclusion>
                <groupId>org.apache.httpcomponents</groupId>
                <artifactId>httpclient</artifactId>
              </exclusion>
            </exclusions>                   
        </dependency>
        <dependency>
            <groupId>io.fabric8</groupId>
            <artifactId>openshift-client</artifactId>
            <exclusions>
              <exclusion>
                <groupId>com.fasterxml.jackson.dataformat</groupId>
                <artifactId>jackson-dataformat-yaml</artifactId>
              </exclusion>
              <exclusion>
                <groupId>com.fasterxml.jackson.core</groupId>
                <artifactId>*</artifactId>            
              </exclusion>
            </exclusions>
        </dependency>     
        <dependency>
          <groupId>io.fabric8</groupId>
          <artifactId>kubernetes-api</artifactId>
          <exclusions>
            <exclusion>
              <groupId>com.fasterxml.jackson.dataformat</groupId>
              <artifactId>jackson-dataformat-yaml</artifactId>
            </exclusion>
            <exclusion>
              <groupId>com.fasterxml.jackson.core</groupId>
              <artifactId>*</artifactId>            
            </exclusion>
          </exclusions>          
        </dependency>           
        <!-- data source driver dependencies -->
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
            <scope>runtime</scope>
        </dependency>
        <dependency>
            <groupId>org.postgresql</groupId>
            <artifactId>postgresql</artifactId>
            <scope>runtime</scope>
        </dependency>        
        <!-- Test Dependencies -->
		<dependency>
			<groupId>org.jboss.spec</groupId>
			<artifactId>jboss-javaee-7.0</artifactId>
			<type>pom</type>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.teiid.komodo</groupId>
			<artifactId>komodo-utils</artifactId>
			<type>test-jar</type>
			<scope>test</scope>
		</dependency>
        <dependency>
          <groupId>org.teiid.komodo</groupId>
          <artifactId>komodo-core</artifactId>
          <type>test-jar</type>
          <scope>test</scope>
        </dependency>
		<dependency>
			<groupId>org.wildfly.swarm</groupId>
			<artifactId>arquillian</artifactId>
            <scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.eclipse.jgit</groupId>
			<artifactId>org.eclipse.jgit</artifactId>
			<scope>test</scope>
		</dependency>		

		<!-- Required for unit testing the rest resources rather than integration testing -->
		<dependency>
			<groupId>org.jboss.resteasy</groupId>
			<artifactId>tjws</artifactId>
			<scope>test</scope>
			<version>${version.resteasy}</version>
		</dependency>

		<!-- Required for unit testing the rest resources. A xnio implementation is already provided in swarm -->
		<dependency>
			<groupId>org.jboss.xnio</groupId>
			<artifactId>xnio-nio</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.wildfly.swarm</groupId>
			<artifactId>arquillian</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.jboss.arquillian.junit</groupId>
			<artifactId>arquillian-junit-container</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.jboss.shrinkwrap.resolver</groupId>
			<artifactId>shrinkwrap-resolver-depchain</artifactId>
			<type>pom</type>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>org.jboss.resteasy</groupId>
			<artifactId>resteasy-jaxrs</artifactId>
			<version>${version.resteasy}</version>
			<scope>test</scope>
		</dependency>

		<!-- THIS Saxon-HE DEPENDENCY NEEDS TO BE REMOVED AFTER UPGRADE IN TEIID OR SWARM -->
        <dependency>
            <groupId>net.sf.saxon</groupId>
            <artifactId>Saxon-HE</artifactId>
            <version>9.8.0-6</version>
            <scope>test</scope>
        </dependency> 						
	</dependencies>

	<build>
		<!-- Write out the app properties to file -->
		<resources>
			<resource>
				<directory>src/main/resources</directory>
				<filtering>true</filtering>
				<includes>
					<include>**/*.*</include>
				</includes>
			</resource>
		</resources>

		<!-- Set the name of the war, used as the context root when the app is 
			deployed -->
		<finalName>${rest-context}</finalName>

		<plugins>
			<!-- Creates the war for deployment -->
			<plugin>
				<artifactId>maven-war-plugin</artifactId>
				<configuration>
					<warName>${rest-context}</warName>
					<failOnMissingWebXml>false</failOnMissingWebXml>
					
					<!-- Avoid filtering certain types of file -->
					<nonFilteredFileExtensions>
						<!-- default value contains jpg,jpeg,gif,bmp,png -->
						<nonFilteredFileExtension>jpg,jpeg,gif,bmp,png,ttf,svg,woff,woff2,eot,map</nonFilteredFileExtension>
					</nonFilteredFileExtensions>

					<!-- Adds the swagger ui files to war, filtering them to include the 
						context -->
					<webResources>
						<resource>
							<directory>api-docs</directory>
							<filtering>true</filtering>
							<targetPath>api-docs</targetPath>
						</resource>
					</webResources>

					<archive>
						<manifestEntries>
							<Dependencies>${manifest.dependencies}</Dependencies>
						</manifestEntries>
					</archive>
				</configuration>
			</plugin>

			<plugin>
				<groupId>org.wildfly.swarm</groupId>
				<artifactId>wildfly-swarm-plugin</artifactId>
				<version>${version.wildfly.swarm}</version>
				<executions>
					<execution>
						<goals>
							<goal>package</goal>
						</goals>
					</execution>
				</executions>
				<configuration>
					<arguments>
						<argument>-S</argument>
						<argument>openshift</argument>
					</arguments>
				</configuration>
			</plugin>      
		</plugins>
	</build>

	<profiles>
		<profile>
			<id>arquillian</id>
			<build>
				<plugins>
					<plugin>
						<!-- plugin used for integration tests as these require the newly packaged war file -->
						<!-- so tests will execute during the final verify stage -->
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-failsafe-plugin</artifactId>
						<executions>
							<!-- Invokes both the integration-test and the verify goals -->
							<execution>
								<id>integration-tests</id>
								<goals>
									<goal>integration-test</goal>
									<goal>verify</goal>
								</goals>
								<configuration>
									<!-- Properties ensure that each integration test class is started -->
									<!-- up in a brand new jvm instance so that the jmx resources in infinispan -->
									<!-- are not reused, which causes errors and deployment failure -->
									<forkCount>1</forkCount>
									<reuseForks>false</reuseForks>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
		<profile>
			<id>docker-release</id>
			<build>
				<plugins>
					<plugin>
                		<groupId>io.fabric8</groupId>
                		<artifactId>docker-maven-plugin</artifactId>
                		<version>0.23.0</version>
                		<configuration>
                  		<registry>registry.hub.docker.com</registry>
                  			<images>
                    			<image>
                     				<name>${docker.username}/${docker.imagename}:${project.version}</name>
                      				<alias>komodo</alias>
                      				<build>
                        				<filter>@</filter>
                        				<dockerFileDir>${project.basedir}/docker</dockerFileDir>
                        				<assembly>
                            				<inline>
                              					<fileSets>
                              						<fileSet>
                                						<directory>${project.build.directory}</directory>
                                						<outputDirectory>/</outputDirectory>   
                                						<includes>
                                  							<include>**/*-swarm.jar</include>
                                						</includes>
                              						</fileSet>
                             					</fileSets>
                            				</inline>
                        				</assembly>
                      				</build>
                    			</image>                   
                  			</images>
                		</configuration>
                		<executions>
                  			<execution>
                    			<id>docker-build</id>
                    			<goals>
                      				<goal>build</goal>
                      				<goal>push</goal>
                    			</goals>
                  			</execution>
                		</executions>
              		</plugin>
				</plugins>
			</build>
		</profile>
	</profiles>
</project>
